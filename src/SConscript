Import('env')
import os
import sys

env=env.Clone()

opts=Variables()
opts.Add("MSYS_WITHOUT_LPSOLVE", "without lpsolve support?")
opts.Add("MSYS_WITHOUT_INCHI", "without compiled-in inchi support?")
opts.Add("MSYS_BOOST_SUFFIX", "suffix for boost libraries (e.g. -mt)")
opts.Update(env)

if "SCHRODINGER_SRC" in os.environ:
    schrod_win_libs = ['libreassign_ff', 'libdesres']
    schrod_osx_libs = ['reassignff', 'desres']
    schrod_only_objs = ['mae/modify_pair.cxx']
else:
    schrod_win_libs = []
    schrod_osx_libs = []
    schrod_only_objs = []

if sys.platform.startswith("win32"):
    env.AppendUnique(LIBS=['libsqlite3', 'zlib', 'snappy'] + schrod_win_libs)
    if not env.get('MSYS_WITHOUT_LPSOLVE'):
        env.AppendUnique(LIBS=['lpsolve'])
else:
    env.AppendUnique(LIBS=['sqlite3', 'z'])
if env['PLATFORM'] == 'darwin':
    env.AppendUnique(LIBS=schrod_osx_libs)
    if not env.get('MSYS_WITHOUT_LPSOLVE'):
        env.AppendUnique(LIBS=['lpsolve55'])

bsx=env.get('MSYS_BOOST_SUFFIX', '')
boost_libs=[(x+bsx) for x in ( 
    'boost_iostreams', 'boost_filesystem', 'boost_system')]


coreenv = env.Clone()
coreenv.AddLibrary('msys-core', Split('''
append.cxx
clone.cxx
override.cxx
param_table.cxx
system.cxx
term_table.cxx
value.cxx
'''))

env.Append(LIBS=boost_libs)

env.Append(CPPPATH='.')

msysenv=env
Export('msysenv')

def split_version(verstr):
    dash = verstr.find('-')
    if dash != -1:
        nice_verstr = verstr[:dash]
    else:
        nice_verstr = verstr
    return nice_verstr.split('.')

def hexversion(triplet):
    major, minor, micro = map(int,triplet)
    return '%d.0.0' % ((major << 16) | (minor << 8) | (micro << 0))

def build_version_hxx( target, source, env ):
    verstr = env['ENV'].get('MSYS_VERSION', '0.0.0')
    major, minor, micro = split_version(verstr)
    fd=file(target[0].path, 'w')
    print >> fd, "#define MSYS_VERSION \"%s\"" % verstr
    for x in 'major', 'minor', 'micro':
        u=x.upper()
        v=int(locals()[x])
        print >> fd, "#define MSYS_%s_VERSION %d" % (u,v)
    print >> fd, "#define MSYS_VERSION_HEX ((MSYS_MAJOR_VERSION << 16) | \\"
    print >> fd, "                          (MSYS_MINOR_VERSION <<  8) | \\"
    print >> fd, "                          (MSYS_MICRO_VERSION <<  0))"
    print >> fd, "#define MSYS_ABI_VERSION 1"

    fd.close()

lexenv = env.Clone()
lexenv.Append(CPPDEFINES='YY_NO_INPUT')
env.Command('version.hxx', '../garden-install-helper', build_version_hxx )
if sys.platform.startswith("win32"):
    smiles_objs = []
    lexobjs = []
    sdfobjs = [] # too many posix dependencies in sdf for windows to handle
else:
    env.Command('smiles/lexer.cxx', 'smiles/smiles.l', 'flex -o $TARGET $SOURCE')
    env.Command(['smiles/parser.cxx', 'smiles/parser.hxx'], 'smiles/smiles.y', 'bison --report=state -t -o $TARGET $SOURCE')
    smiles_objs = Split('''
smiles/smiles.cxx
smiles/parser.cxx
''')
    lexenv.Append(CXXFLAGS='-Wno-deprecated-register')
    lexenv.Append(CXXFLAGS='-Wno-sign-compare') # needed for docker/desres build
    lexobjs = lexenv.AddObject(Split('''
smiles/lexer.cxx
'''))
    sdfobjs = Split('''
sdf/export.cxx
sdf/import.cxx
''')

if env.get('MSYS_WITHOUT_LPSOLVE'):
    lpenv=env.Clone()
    lpenv.Append(CPPDEFINES=['MSYS_WITHOUT_LPSOLVE'])
    lpobjs=lpenv.AddObject(['analyze.cxx'])
else:
    lpobjs=env.AddObject(Split('''
analyze.cxx
analyze/bond_orders.cxx
'''))

if env.get("MSYS_WITHOUT_INCHI"):
    inchienv = env.Clone()
    inchienv.Append(CPPDEFINES='MSYS_WITHOUT_INCHI'.split())
    inchi = inchienv.AddObject('inchi.cxx')
else:
    inchi = env.AddObject('inchi.cxx')

def get_shlib_version():
    import subprocess
    ver = env['ENV'].get('MSYS_VERSION')
    if ver is not None:
        return subprocess.check_output('git rev-parse HEAD'.split())[:8]
    return None

libmsys_env = env.Clone()
libmsys_env.Append(LIBS=['msys-core'])
if sys.platform.startswith("darwin"):
    desmond_release = os.environ["DESMOND"]
    libmsys_env.Append(LINKFLAGS=['-dynamiclib', '-install_name', '@rpath/../../../{}/lib/Darwin-x86_64/libmsys.dylib'.format(desmond_release)])
libmsys=libmsys_env.AddLibrary('msys', lexobjs + lpobjs + sdfobjs + schrod_only_objs + [inchi] + smiles_objs + Split('''

analyze/eigensystem.cxx
analyze/get_fragments.cxx
analyze/topological_ids.cxx

amber/import_prmtop.cxx

atomsel.cxx
atomsel/token.cxx
atomsel/atomsel.cxx
atomsel/bool.cxx
atomsel/expr.cxx
atomsel/key.cxx
atomsel/within.cxx
atomsel/query.cxx

dms/dms.cxx
dms/export_dms.cxx
dms/import_dms.cxx

molfile/libmolfile_plugin.c
molfile/molfile.cxx
molfile/msys.cxx
molfile/dtrframe.cxx
molfile/dtrplugin.cxx
molfile/dxplugin.cxx
molfile/dcdplugin.c
molfile/gromacsplugin.cxx
molfile/rst7plugin.cxx
molfile/psfplugin.c
molfile/xyzplugin.c

fastjson/json.cxx
fastjson/JSON_parser.c
fastjson/parse.cxx
fastjson/print.cxx

fastjson/dtoa/bignum.cc         
fastjson/dtoa/diy-fp.cc     
fastjson/dtoa/fixed-dtoa.cc
fastjson/dtoa/bignum-dtoa.cc    
fastjson/dtoa/dtoa.cc
fastjson/dtoa/cached-powers.cc  
fastjson/dtoa/fast-dtoa.cc

elements.cxx
geom.cxx

io.cxx
istream.cxx

mae/ff.cxx
mae/export_mae.cxx
mae/import_mae.cxx
mae/mae.cxx
mae/maeatoms.cxx
mae/sitemap.cxx
mae/vdwmap.cxx

mae/ff/angles.cxx
mae/ff/bonds.cxx
mae/ff/cmap.cxx
mae/ff/constraints.cxx
mae/ff/dihedrals.cxx
mae/ff/dihedrals6atom.cxx
mae/ff/exclusions.cxx
mae/ff/fbhw.cxx
mae/ff/inplanewags.cxx
mae/ff/pairs.cxx
mae/ff/pseudopol.cxx
mae/ff/restraints.cxx
mae/ff/vdwtypes.cxx
mae/ff/virtuals.cxx

mae/destro/Attribute.cxx         
mae/destro/DestroArray.cxx       
mae/destro/DestroBlock.cxx       
mae/destro/Destro.cxx            
mae/destro/DestroNamedBlock.cxx  
mae/destro/DestroRow.cxx
mae/destro/DestroTop.cxx
mae/destro/Maeff.cxx
mae/destro/prep_alchemical_mae.cxx
mae/destro/Tokenizer.cxx
mae/destro/Zing.cxx

mol2/assign.cxx
mol2/export.cxx
mol2/import.cxx

pdb/pdb.cxx
pdb/webpdb.c

pfx/graph.cxx
psf/import.cxx

schema.cxx
schema/schema.cxx
spatial_hash.cxx

annotated_system.cxx
graph.cxx
import.cxx
provenance.cxx
smarts.cxx
analyze/sssr.cxx
xyz.cxx

'''), SHLIBVERSION=get_shlib_version())

env.AddStagedHeaders(Glob("*.hxx"), prefix='msys')
env.AddStagedHeaders(Glob('atomsel/*.h*'), prefix='msys/atomsel')
env.AddStagedHeaders(Glob('fastjson/*.hxx'), prefix='msys/fastjson')
env.AddStagedHeaders(Glob('pfx/*.hxx'), prefix='msys/pfx')
env.AddStagedHeaders(Glob('molfile/*.h*'), prefix='msys/molfile')

prgenv=env.Clone()
prgenv.Append(LIBS=['msys', 'msys-core'])
prgenv.AddProgram('fstime', 'molfile/fstime.cxx')
prgenv.AddProgram('fsdump', 'molfile/fsdump.cxx')

Export("libmsys")
