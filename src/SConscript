Import('env')
env=env.Clone()
env.Append(LIBS=['pcre'])

libmsys=env.AddLibrary('msys', Split('''
dms/dms.cxx
dms/export_dms.cxx
dms/import_dms.cxx

mae/ff.cxx
mae/export_mae.cxx
mae/import_mae.cxx
mae/mae.cxx
mae/maeatoms.cxx
mae/sitemap.cxx
mae/vdwmap.cxx

mae/ff/angles.cxx
mae/ff/bonds.cxx
mae/ff/cmap.cxx
mae/ff/constraints.cxx
mae/ff/dihedrals.cxx
mae/ff/dihedrals6atom.cxx
mae/ff/exclusions.cxx
mae/ff/inplanewags.cxx
mae/ff/pairs.cxx
mae/ff/restraints.cxx
mae/ff/vdwtypes.cxx
mae/ff/virtuals.cxx

mae/destro/Attribute.cxx         
mae/destro/DestroArray.cxx       
mae/destro/DestroBlock.cxx       
mae/destro/Destro.cxx            
mae/destro/DestroNamedBlock.cxx  
mae/destro/DestroRow.cxx
mae/destro/DestroTop.cxx
mae/destro/Maeff.cxx
mae/destro/prep_alchemical_mae.cxx
mae/destro/Tokenizer.cxx
mae/destro/Zing.cxx

schema.cxx
schema/schema.cxx

append.cxx
clone.cxx
param_table.cxx
system.cxx
term_table.cxx
value.cxx

atomsel.cxx
atomsel/expression.cxx
atomsel/k-nearest.cxx
atomsel/keyword.cxx
atomsel/keyword_predicate.cxx
atomsel/msys_keyword.cxx
atomsel/selection.cxx
atomsel/predicate.cxx
atomsel/regex.cxx
atomsel/vmd.cxx
atomsel/vmd_keyword.cxx
atomsel/VmdLexer.c
atomsel/VmdParser.c
atomsel/within_predicate.cxx
'''))
#view.cxx

env.Alias('install', env.Install('$PREFIX/include/msys', Glob("*.hxx")))

Export("libmsys")
