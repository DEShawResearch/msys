Import('env')
env=env.Clone()

opts=Variables()
opts.Add("MSYS_WITHOUT_LPSOLVE", "without lpsolve support?")
opts.Add("MSYS_WITHOUT_INCHI", "without compiled-in inchi support?")
opts.Add("MSYS_BOOST_SUFFIX", "suffix for boost libraries (e.g. -mt)")
opts.Update(env)

bsx=env.get('MSYS_BOOST_SUFFIX', '')
boost_libs=[(x+bsx) for x in ( 
    'boost_iostreams', 'boost_filesystem', 'boost_system', 
    'boost_thread', 'boost_regex', 'boost_serialization')]
env.Append(LIBS=boost_libs)
env.AppendUnique(LIBS=['sqlite3', 'z', 'snappy' ])
env.Append(CPPPATH=['$OBJDIR/src'])

msysenv=env
Export('msysenv')

def get_version(path):
    ''' return version string from file '''
    g=dict()
    import os
    execfile(path, g)
    return g['msys_version']

def split_version(verstr):
    dash = verstr.find('-')
    if dash != -1:
        nice_verstr = verstr[:dash]
    else:
        nice_verstr = verstr
    return nice_verstr.split('.')

def hexversion(triplet):
    major, minor, micro = map(int,triplet)
    return '%d.0.0' % ((major << 16) | (minor << 8) | (micro << 0))

def build_version_hxx( target, source, env ):
    verstr = get_version(source[0].path)
    major, minor, micro = split_version(verstr)
    fd=file(target[0].path, 'w')
    print >> fd, "#define MSYS_VERSION \"%s\"" % verstr
    for x in 'major', 'minor', 'micro':
        u=x.upper()
        v=int(locals()[x])
        print >> fd, "#define MSYS_%s_VERSION %d" % (u,v)
    print >> fd, "#define MSYS_VERSION_HEX ((MSYS_MAJOR_VERSION << 16) | \\"
    print >> fd, "                          (MSYS_MINOR_VERSION <<  8) | \\"
    print >> fd, "                          (MSYS_MICRO_VERSION <<  0))"

    fd.close()

env.Command('version.hxx', 'version.py', build_version_hxx )

selenv = env.Clone()
selenv.Append(CPPDEFINES='YY_NO_INPUT')
selobjs = selenv.AddObject(Split('''
atomsel.cxx
atomsel/expression.cxx
atomsel/keyword.cxx
atomsel/keyword_predicate.cxx
atomsel/msys_keyword.cxx
atomsel/predicate.cxx
atomsel/vmd.cxx
atomsel/vmd_keyword.cxx
atomsel/lexer.cxx
atomsel/parser.cxx
atomsel/within_predicate.cxx
'''))

if env.get('MSYS_WITHOUT_LPSOLVE'):
    lpenv=env.Clone()
    lpenv.Append(CPPDEFINES=['MSYS_WITHOUT_LPSOLVE'])
    lpobjs=lpenv.AddObject(['analyze.cxx'])
else:
    lpobjs=env.AddObject(Split('''
analyze.cxx
analyze/bond_orders.cxx
analyze/topological_ids.cxx
'''))

if env.get("MSYS_WITHOUT_INCHI"):
    inchienv = env.Clone()
    inchienv.Append(CPPDEFINES='MSYS_WITHOUT_INCHI'.split())
    inchi = inchienv.AddObject('inchi.cxx')
else:
    inchi = env.AddObject('inchi.cxx')

ver = hexversion(split_version(get_version(File('version.py').srcnode().abspath)))
libmsys=env.AddLibrary('msys', selobjs + lpobjs + [inchi] + Split('''
alchemical.cxx

analyze/eigensystem.cxx
analyze/get_fragments.cxx

amber/import_crd.cxx
amber/import_prmtop.cxx

archive.cxx

dms/dms.cxx
dms/export_dms.cxx
dms/import_dms.cxx

molfile/libmolfile_plugin.c
molfile/molfile.cxx
molfile/msys.cxx
molfile/dtrframe.cxx
molfile/dtrplugin.cxx
molfile/dxplugin.cxx
molfile/dcdplugin.c
molfile/psfplugin.c
molfile/xyzplugin.c

fastjson/json.cxx
fastjson/JSON_parser.c
fastjson/parse.cxx
fastjson/print.cxx

fastjson/dtoa/bignum.cc         
fastjson/dtoa/diy-fp.cc     
fastjson/dtoa/fixed-dtoa.cc
fastjson/dtoa/bignum-dtoa.cc    
fastjson/dtoa/dtoa.cc
fastjson/dtoa/cached-powers.cc  
fastjson/dtoa/fast-dtoa.cc

elements.cxx
geom.cxx

io.cxx
istream.cxx

mae/ff.cxx
mae/export_mae.cxx
mae/import_mae.cxx
mae/mae.cxx
mae/maeatoms.cxx
mae/sitemap.cxx
mae/vdwmap.cxx

mae/ff/angles.cxx
mae/ff/bonds.cxx
mae/ff/cmap.cxx
mae/ff/constraints.cxx
mae/ff/dihedrals.cxx
mae/ff/dihedrals6atom.cxx
mae/ff/exclusions.cxx
mae/ff/fbhw.cxx
mae/ff/inplanewags.cxx
mae/ff/pairs.cxx
mae/ff/pseudopol.cxx
mae/ff/restraints.cxx
mae/ff/vdwtypes.cxx
mae/ff/virtuals.cxx

mae/destro/Attribute.cxx         
mae/destro/DestroArray.cxx       
mae/destro/DestroBlock.cxx       
mae/destro/Destro.cxx            
mae/destro/DestroNamedBlock.cxx  
mae/destro/DestroRow.cxx
mae/destro/DestroTop.cxx
mae/destro/Maeff.cxx
mae/destro/prep_alchemical_mae.cxx
mae/destro/Tokenizer.cxx
mae/destro/Zing.cxx

mol2/assign.cxx
mol2/export.cxx
mol2/import.cxx

sdf/export.cxx
sdf/import.cxx

pdb/pdb.cxx
pdb/webpdb.c

psf/import.cxx

schema.cxx
schema/schema.cxx
spatial_hash.cxx

annotated_system.cxx
append.cxx
clone.cxx
graph.cxx
override.cxx
param_table.cxx
provenance.cxx
smarts.cxx
analyze/sssr.cxx
system.cxx
term_table.cxx
value.cxx
xyz.cxx

'''), SHLIBVERSION=ver)

env.AddStagedHeaders(Glob("*.hxx"), prefix='msys')
env.AddStagedHeaders(Glob('atomsel/*.hxx'), prefix='msys/atomsel')
env.AddStagedHeaders(Glob('fastjson/*.hxx'), prefix='msys/fastjson')
env.AddStagedHeaders(Glob('pfx/*.hxx'), prefix='msys/pfx')
env.AddStagedHeaders(Glob('molfile/*.h*'), prefix='msys/molfile')

Export("libmsys")
