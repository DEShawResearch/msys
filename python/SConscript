Import('msysenv')
Import('libmsys')
import sys, os
env=msysenv.Clone()

is_linux = sys.platform.startswith("linux")
is_windows = sys.platform.startswith("win32")
is_schrodinger_build = "SCHRODINGER_SRC" in os.environ

env.Append( 
        CPPPATH=['../src'],
        CXXFLAGS='' if is_windows else '-Wno-unused-local-typedefs',
        LIBS=['msys', 'msys-core', 'boost_python' + ('$MSYS_BOOST_SUFFIX' if is_schrodinger_build else '$BOOST_SUFFIX')] )

if is_linux:
    env.Append(CCFLAGS='-Wno-cpp')
elif is_windows:
    env.Append(LIBS=["python27"])
else:
    # MacOS
    env.Append(CCFLAGS='-Wno-error')
if env.get("MSYS_WITHOUT_INCHI"):
    env.Append(CPPDEFINES='MSYS_WITHOUT_INCHI')

pymodfiles='''
analyze.cxx
annotated_system.cxx
atom.cxx
bond.cxx
chain.cxx
graph.cxx
inchi.cxx
io.cxx
override.cxx
param.cxx
pymod.cxx
residue.cxx
system.cxx
spatial_hash.cxx
term.cxx
wrap_obj.cxx
variant.cxx
'''.split()
#variant.cxx

pyext=env.AddPythonExtension('_msys', pymodfiles, prefix='msys')
env.Requires(pyext, libmsys)
env.AddPythonModule('__init__.py', prefix='msys')
env.AddPythonModule('atomsel.py', prefix='msys')

pfxenv=env.Clone()
pfxenv.Append(CXXFLAGS='-fno-strict-aliasing')
pfxext = pfxenv.AddPythonExtension('pfx', 'pfx.cxx', prefix='msys')
pfxenv.Requires(pfxext, libmsys)

env.AddHeaders(['capsule.hxx'], prefix='msys/python')
env.SConscript('molfile/SConscript')

# python3 build
py3env = msysenv.Clone()
py3env.AddPython3Module('__init__.py', prefix='msys')
py3env.AddPython3Module('atomsel.py', prefix='msys')

