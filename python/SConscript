Import('msysenv')
Import('libmsys')

env=msysenv.Clone()
env.Append( 
        CPPPATH=['../src'],
        CXXFLAGS='-Wno-unused-local-typedefs',
        LIBS=['msys', 'boost_python$BOOST_SUFFIX'] )

if env['PLATFORM']=='darwin':
    env.Append(CCFLAGS='-Wno-error')
else:
    env.Append(CCFLAGS='-Wno-cpp')

if env.get("MSYS_WITHOUT_INCHI"):
    env.Append(CPPDEFINES='MSYS_WITHOUT_INCHI')

pymodfiles='''
analyze.cxx
annotated_system.cxx
atom.cxx
bond.cxx
chain.cxx
graph.cxx
inchi.cxx
io.cxx
override.cxx
param.cxx
pymod.cxx
residue.cxx
system.cxx
spatial_hash.cxx
term.cxx
wrap_obj.cxx
variant.cxx
'''.split()
#variant.cxx

pyext=env.AddPythonExtension('_msys', pymodfiles, prefix='msys')
env.Requires(pyext, libmsys)
env.AddPythonModule('__init__.py', prefix='msys')
env.AddPythonModule('atomsel.py', prefix='msys')

ceext=env.AddPythonExtension('_cealign', 'cealign.cxx', prefix='msys')
env.Requires(ceext, libmsys)
env.AddPythonModule('cealign.py', prefix='msys')

pfxenv=env.Clone()
pfxenv.Append(CXXFLAGS='-fno-strict-aliasing')
pfxext = pfxenv.AddPythonExtension('pfx', 'pfx.cxx', prefix='msys')
pfxenv.Requires(pfxext, libmsys)

env.SConscript('molfile/SConscript')


