#!/usr/bin/env desres-exec
# -*- python -*-
#{
# desres-cleanenv $MSYS_CLEANENV -- python $0 "$@"
#}

'''
dms-info [ options ] [ dms files ]

Write information about a dms file to stdout.

'''

import sys
import msys

def print_info(mol):
    print "Structure:"
    alc=[a for a in mol._ptr.atoms() if mol._ptr.atom(a).alchemical]
    print "%12s: %8d (%4d alchemical)" % ("Atoms", mol.natoms, len(alc))
    print "%12s: %8d" % ("Bonds", mol.nbonds)
    print "%12s: %8d" % ("Residues", mol.nresidues)
    print "%12s: %8d" % ("Chains", mol.nchains)
    print "%12s: %s"  % ("Global cell", mol.cell[0])
    print "%12s  %s"  % ("", mol.cell[1])
    print "%12s  %s"  % ("", mol.cell[2])
    print
    for sel, title in (
            ('protein', 'Protein'),
            ('lipid', 'Lipid'),
            ('ions', 'Ions'),
            ('water', 'Water'),
            ('not (protein or lipid or ions or water)', 'Other')):

        ptr = mol._ptr
        atoms=ptr.atomselect(sel)
        residues=set(ptr.atom(a).residue for a in atoms)
        chains=set(ptr.residue(r).chain for r in residues)
        print "%12s: %8d atoms, %8d residues, %8d chains" % (
                title, len(atoms), len(residues), len(chains))

    
    tdict=dict()
    for table in mol.tables:
        tdict.setdefault(table.category, []).append(table)

    for cat in sorted(tdict.keys()):
        tables = tdict[cat]
        title="%s tables" % cat
        print "\n%s Tables:" % cat.title()

        for table in tables:
            nalc=0
            if table.alchemical:
                for t in table.terms:
                    if t.alchemical:
                        nalc += 1
            print "%20s: %d sites, %6d params, %6d terms, %2d alchemical" % (
                    table.name, table.natoms, len(table.params), 
                    table.nterms-nalc, nalc)

    nbinfo=mol.nonbonded_info
    print "\n%12s:" % "Nonbonded Info"
    print "%20s: %s" % ("vdw_funct", nbinfo.vdw_funct)
    print "%20s: %s" % ("vdw_rule", nbinfo.vdw_rule)

    print "\n%s:" % "Provenance"
    for i, p in enumerate(mol.provenance):
        print "%4d) %16s %s" % (i+1, p.timestamp, p.user)
        print "%12s: %s" % ("version", p.version)
        print "%12s: %s" % ("workdir", p.workdir)
        print "%12s: %s" % ("cmdline", p.cmdline)
        print


def main():
    import optparse
    parser = optparse.OptionParser(__doc__)

    opts, args = parser.parse_args()
    for path in args:
        mol = msys.LoadDMS(path)
        print "-" * 75
        print path
        print
        print_info(mol)

if __name__=="__main__": exit(main())

# vim: filetype=python
