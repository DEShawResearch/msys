#!/usr/bin/env desres-exec
# -*- python -*-
#{
# desres-cleanenv $MSYS_CLEANENV -- python $0 "$@"
#}

'''
dms-alchemical A.dms B.dms atom.map C.dms

Create an alchemical system from A and B states and a map between them.

'''
import sys
from msys import _msys
from msys import _alchemical


def read_atommap(path):
    ''' read 1-based atom map from path and convert to 0-based ids '''
    pairs=[]
    for i, line in enumerate(path):
        line = line.strip()
        if not line or line.startswith('#'):
            continue
        try:
            a,b = map(int, line.split())
            assert a!=0
            assert b!=0
            a = -1 if a<0 else a-1
            b = -1 if b<0 else b-1
            pairs.append((a,b))
        except:
            print >> sys.stderr, "Misformatted line %d in atom map %s" % (
                    i+1, path)
            raise
    return pairs

def main():
    import optparse
    parser = optparse.OptionParser(__doc__)

    opts, args = parser.parse_args()
    if len(args)!=4: parser.error("incorrect number of arguments")

    a_path, b_path, m_path, o_path = args

    A = _msys.ImportDMS(a_path, False)
    B = _msys.ImportDMS(b_path, False)
    m = read_atommap(file(m_path))

    C = _alchemical.MakeAlchemical(A,B,m)

    _msys.ExportDMS(C, o_path, _msys.Provenance.fromArgs(sys.argv))

if __name__=="__main__": exit(main())

# vim: filetype=python
