#!/usr/bin/env desres-exec
# -*- python -*-
#{
# desres-cleanenv -m numpy/1.6.2-31A/lib-python \
# -- python $0 "$@" 
#}

'''
dms-uncharge a.dms out.dms [options]

Create an alchemical dms file such that the selected atoms have their
charges set to 0 in the B state.
'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))

import msys

def UnchargeAlchemical( mol, seltext ):
    ''' make the selected atoms alchemical, and set their charge to 0 in the
    B state.
    '''

    # select atoms
    atoms=mol.select(seltext)
    if not atoms:
        print >> sys.stderr, "WARNING: no atoms in selection"
        return

    # get the nonbonded table
    try:
        nb=mol.table('nonbonded')
    except:
        print >> sys.stderr, "ERROR: no nonbonded table was found"
        exit(1)

    # get the alchemical nonbonded table
    ALC='alchemical_nonbonded'
    if not ALC in mol.table_names:
        alc=mol.addTable(ALC, 1, nb.params)
        alc.category = 'nonbonded'
        alc.addTermProp('chargeB', float)
        alc.addTermProp('moiety', int)
    else:
        alc=mol.table(ALC)

    for atom in atoms:
        nbterm = nb.findWithAll([atom])
        if not nbterm:
            print >> sys.stderr, "No nonbonded params for atom %d" %(atom.id)
            exit(1)
        nbterm = nbterm[0]
        alcterm=alc.findWithAll([atom])
        if not alcterm:
            alcterm=alc.addTerm([atom], nbterm.param)
        alcterm['chargeB'] = 0.0

def main():
    import optparse
    parser = optparse.OptionParser(__doc__)

    parser.add_option('-s', '--selection', default='all',
        help='Use only atoms in selection')

    opts, args = parser.parse_args()
    if len(args)!=2: parser.error("incorrect number of arguments")

    a_name, o_name = args
    mol=msys.LoadDMS(a_name)
    
    UnchargeAlchemical(mol, opts.selection)

    msys.SaveDMS(mol, o_name)

if __name__=="__main__": exit(main())

# vim: filetype=python
