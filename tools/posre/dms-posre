#!/usr/bin/env desres-exec
# -*- python -*-
#{
# desres-cleanenv -m numpy/1.6.2-31A/lib-python \
# -- python $0 "$@"
#}

'''
dms-posre input.dms output.dms [ options ]

Assign harmonic position restraints to selected atoms.  

If no selection is provided, and --replace is specified, then the output 
file will contain no restraints.

'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))

import msys
from msys import posre
import math

def main():
    import optparse
    parser = optparse.OptionParser(__doc__)
    parser.add_option('-f', type='float', default=0.0,
            help='force constant in PEAK units')
    parser.add_option('-x', default=None,
            help='force constant along x axis in PEAK units')
    parser.add_option('-y', default=None,
            help='force constant along x axis in PEAK units')
    parser.add_option('-z', default=None,
            help='force constant along x axis in PEAK units')
    parser.add_option('-s', '--selection', default='none',
            help="selection for restrained atoms")
    parser.add_option('--replace', action="store_true", default=False,
            help='replace any existing harmonic position restraints')
    parser.add_option('--reference-structure', default=None,
            help='get equilibrium positions from reference structure')
    parser.add_option('--reference-selection', default=None,
            help='selection for reference structure [default: selection]')
    parser.add_option('--max-distance', default=None,
            help='abort if max restraint distance exceeds value in Angstroms')
    parser.add_option('--max-energy', default=None,
            help='abort if max restraint energy exceeds value in kcal/mol')

    parser.add_option('-q', '--quiet', action='store_true', default=False)

    opts, args = parser.parse_args()
    if len(args)!=2:
        parser.error("incorrect number of arguments")

    if not opts.quiet: print "Loading input file <%s>" % args[0]
    mol=msys.LoadDMS(args[0])

    atoms=mol.select(opts.selection)
    if not opts.quiet: print "Adding restraints to %d atoms" % len(atoms)

    fc=float(opts.f)
    fcx = fc if opts.x is None else float(opts.x)
    fcy = fc if opts.y is None else float(opts.y)
    fcz = fc if opts.z is None else float(opts.z)
    if not opts.quiet: print "Using force constant (%s, %s, %s)" % (
            fcx,fcy,fcz)

    ref=opts.reference_structure
    if ref:
        if not opts.quiet: print "Loading reference file <%s>" % ref
        ref_mol = msys.LoadDMS(ref)
        if not opts.quiet: print "Restraining atoms to reference positions"
        if opts.reference_selection:
            ref_selection = opts.reference_selection
        else:
            ref_selection = opts.selection
        ref_sel = ref_mol.clone(ref_selection)
        cur_sel = mol.clone(opts.selection)
        assert len(ref_sel.atoms) == len(atoms)
        for a, p in zip(atoms, ref_sel.positions):
            a.pos = p

        displacements = ref_sel.positions - cur_sel.positions
        E_restr = ((displacements**2)*(fcx, fcy, fcz)).sum(-1)
        index = E_restr.argmax()
        dist = math.sqrt(sum(displacements[index]**2))
        a = atoms[index]
        r = a.residue
        if not opts.quiet:
            a_name = 'chain %s %s%d:%s' % (r.chain.name,r.name,r.resid,a.name)
            fmt = "Most energetic restraint: %s (%.1f kcal/mol, %.1f Angstroms)"
            print fmt % (a_name, E_restr.max(), dist)
        if opts.max_distance is not None:
            if dist > float(opts.max_distance):
                print >> sys.stderr, "ERROR: Maximum distance exceeded."
                return 1
        if opts.max_energy is not None:
            if E_restr.max() > float(opts.max_energy):
                print >> sys.stderr, "ERROR: Maximum energy exceeded."
                return 1

    else:
        if not opts.quiet: print "Restraining atoms to current positions"
    n=posre.apply(mol, atoms, fcx, fcy, fcz, replace=opts.replace)
    if ref:
        for a, p in zip(atoms, cur_sel.positions):
            a.pos = p
    if not opts.quiet: print "Now have restraints on %d atoms" % n

    if not opts.quiet: print "Writing DMS file <%s>" % args[1]
    msys.SaveDMS(mol,args[1])

if __name__=="__main__": exit(main())

# vim: filetype=python
