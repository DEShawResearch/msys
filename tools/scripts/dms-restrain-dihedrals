#!/usr/bin/garden-exec
#{
# garden env-keep-only
# . `dirname $0`/../share/env.sh
# exec python $0 "$@"
#}

import msys
import numpy as np
import sys, os.path, argparse

########################################################################

description = '''
apply_DihedralRestraints.py
========================================================================
This script can be used to apply harmonic dihedral restraints to a 
structure file. It is assumed that the structure file being provided
has been freshly run through viparr. Dihedrals to be restrained can be
specified in several ways for different applications, and can often
be specified using the current dihedral angle in the structure file or
a specified angle (i.e. restrain to current or desired angle).  
========================================================================
'''

#----------------------------------------------------------------------#
# Parse commandline arguments
def parse_args():
    
    parser = argparse.ArgumentParser(
        description=description,
        formatter_class=argparse.RawTextHelpFormatter)

    # Positional arguments
    parser.add_argument('dms_in', 
                        help='DMS input file freshly viparr\'d')
    parser.add_argument('dms_out', 
                        help='DMS output file with applied restraints')

    # Optional arguments
    parser.add_argument('-ps', '--sele_prefix', default='protein',
                        help='Prefix for selection -- defaults to "protein"')
    parser.add_argument('-bb', '--backbone',
                        nargs=3,
                        action='append',
                        metavar=('Start', 'End', 'K'),
                        help=('Restrain Phi/Psi Dihedrals for resid ' +
                              'Start to End with spring constant K'))
    parser.add_argument('-pp', '--phipsi',
                        nargs=4,
                        action='append',
                        metavar=('Resid', 'Phi', 'Psi', 'K'),
                        help='Restrain Phi/Psi Dihedral for Resid with K')
    parser.add_argument('-lad', '--lockarbitrarydihedral',
                        nargs=5,
                        action='append',
                        metavar=('Sel1', 'Sel2', 'Sel3', 'Sel4', 'K'),
                        help='Restrain arbitrary dihedral with spring K')
    parser.add_argument('-ld', '--lockdihedral',
                        nargs=9,
                        action='append',
                        metavar=('Res1', 'Name1', 'Res2', 'Name2', 
                                 'Res3', 'Name3', 'Res4', 'Name4', 'K'),
                        help=('Restrain dihedral given by 4 atoms with' +
                              'spring constant k'))
    parser.add_argument('-sd', '--setdihedral',
                        nargs=10,
                        action='append',
                        metavar=('Res1', 'Name1', 'Res2', 'Name2', 
                                 'Res3', 'Name3', 'Res4', 'Name4', 
                                 'Theta', 'K'),
                        help=('Restrain dihedral given by 4 atoms with' +
                              'spring constant K to angle Theta'))
    parser.add_argument('--tempered', action='store_true',
                        help='Adds tempered flag to all patches')
    parser.add_argument('--tempering_group', type=int,
                        help='Adds tempering group if --tempered flag also set')
    parser.add_argument('-c', '--noclobber',
                        action='store_true', default=False,
                        help='do not overwrite DMS output file if it exists')
    parser.add_argument('-v','--verbosity',
                        type=int, action='store', default=1,
                        help='set verbosity level, default is %(default)s')
    
    return parser.parse_args()
    
#----------------------------------------------------------------------#
# Translate k and theta0 into a set of dihedral_trig parameters
def dihed_params(tmp_k, theta0, Nterms=6):
  
    for i in range(1, 1+Nterms):
        phase = i * (theta0+180.)%360.
        tmp_k = -1.*tmp_k/i
        fc = [0.0 for j in range(Nterms)]
        fc[i-1] = tmp_k
        CONSTTERM = (tmp_k*tmp_k)**0.5
        yield {'phi0' : phase,
               'fc0'  : CONSTTERM,
               'fc1'  : fc[0],
               'fc2'  : fc[1],
               'fc3'  : fc[2],
               'fc4'  : fc[3],
               'fc5'  : fc[4],
               'fc6'  : fc[5], 
               'type' : 'dihedral_patch'}
        
#----------------------------------------------------------------------#
# Create a new nbody param with the given set of parameters
def new_param( nb, params ):
  
    np = nb.params.addParam()
    for key, val in params.items():
        np[key]=val
        
    return np
      
#----------------------------------------------------------------------#
# Add dihedral restraint to dihedral_trig table
def add_dihedrals(mol, subsel, k, theta0, verbosity, tempered, 
                  tempering_group):
        
    # Get dihedral_trig table
    dt = mol.table('dihedral_trig')

    # Generate nbody params
    params = [new_param(dt, p) for p in dihed_params(k, theta0)]
 
    # tempering
    if tempered:
        if 'tempered' not in dt.term_props:
            dt.addTermProp('tempered', int)
        if tempering_group is not None:
            if 'tempering_grp' not in dt.term_props:
                dt.addTermProp('tempering_grp', int)
  
    # Add params for atoms in subselection
    atoms=[a for a in mol.select(subsel)]
    assert len(atoms)==4 # must select exactly 4 atoms
    for p in params:
        if verbosity>=2:
            print('adding dihedral for atom-ids %s' % ([a.id for a in atoms]))
        term = dt.addTerm(atoms,p)
        # tempering
        if tempered:
            term['tempered'] = 1
            term['type'] = term['type'] + '_tempered'
            if tempering_group is not None:
                term['tempering_grp'] = tempering_group

#----------------------------------------------------------------------#

def restrain_phipsi(mol, i, phi, psi, k, verbosity, prefix, tempered, 
                    tempering_group):

    subsel1='%s and ((resid %d and name C) or (resid %d and name N CA C))'%(prefix, i-1,i)
    subsel2='%s and ((resid %d and name N CA C) or (resid %d and name N))'%(prefix, i,i+1)
    
    if verbosity>0:
        print('restraining dihedrals for %s and resid %d with phi=%f, psi=%f, and k=%f'%(prefix, i,phi,psi,k))
    
    add_dihedrals(mol, subsel1, k, phi, verbosity, tempered, tempering_group)
    add_dihedrals(mol, subsel2, k, psi, verbosity, tempered, tempering_group)

#----------------------------------------------------------------------#

def dihedral(p0, p1, p2, p3):
    rads = msys.CalcDihedral(p0, p1, p2, p3)
    angle = rads * 180.0 / np.pi
    return angle

#----------------------------------------------------------------------#

def restrain_dihedrals(mol, entries, verbosity, prefix, tempered, tempering_group):

    for e in entries:

        if (len(e) == 2):
            i = e[0]
            k = e[1]
        
            p1 = np.array(mol.select('%s and resid %d and name C' %(prefix,i-1))[0].pos)
            p2 = np.array(mol.select('%s and resid %d and name N' %(prefix, i))[0].pos)
            p3 = np.array(mol.select('%s and resid %d and name CA' %(prefix, i))[0].pos)
            p4 = np.array(mol.select('%s and resid %d and name C' %(prefix, i))[0].pos)
            p5 = np.array(mol.select('%s and resid %d and name N' %(prefix,i+1))[0].pos) 
        
            phi = dihedral(p1, p2, p3, p4)
            psi = dihedral(p2, p3, p4, p5)

            restrain_phipsi(mol, i, phi, psi, k, verbosity, prefix, tempered,
                            tempering_group)

        elif (len(e) == 4):
            i = e[0]
            phi = e[1]
            psi = e[2]
            k = e[3]
            
            restrain_phipsi(mol, i, phi, psi, k, verbosity, prefix, tempered,
                            tempering_group)

        elif (len(e) == 5):
            subsel1 = e[0]
            subsel2 = e[1]
            subsel3 = e[2]
            subsel4 = e[3]
            k = e[4]

            p1 = np.array(mol.select(subsel1)[0].pos)
            p2 = np.array(mol.select(subsel2)[0].pos)
            p3 = np.array(mol.select(subsel3)[0].pos)
            p4 = np.array(mol.select(subsel4)[0].pos)

            theta = dihedral(p1, p2, p3, p4)
            print(theta)

            subsel = '%s or %s or %s or %s' %(subsel1, subsel2, 
                                              subsel3, subsel4)
            
            add_dihedrals(mol, subsel, k, theta, verbosity, tempered,
                          tempering_group)

        elif (len(e) == 9):
            resi1 = e[0]
            resi2 = e[2]
            resi3 = e[4]
            resi4 = e[6]

            name1 = e[1]
            name2 = e[3]
            name3 = e[5]
            name4 = e[7]

            k = e[8]

            subsel1 = '(protein and resid %d and name %s)' %(resi1, name1) 
            subsel2 = '(protein and resid %d and name %s)' %(resi2, name2) 
            subsel3 = '(protein and resid %d and name %s)' %(resi3, name3) 
            subsel4 = '(protein and resid %d and name %s)' %(resi4, name4) 

            p1 = np.array(mol.select(subsel1)[0].pos)
            p2 = np.array(mol.select(subsel2)[0].pos)
            p3 = np.array(mol.select(subsel3)[0].pos)
            p4 = np.array(mol.select(subsel4)[0].pos)

            theta = dihedral(p1, p2, p3, p4)
            
            subsel = '%s or %s or %s or %s' %(subsel1, subsel2,
                                              subsel3, subsel4)

            if verbosity>0:
                print('restraining dihedral for ([%d %s], [%d %s], [%d %s], [%d %s]) with theta=%f and k=%f' %(resi1, name1, resi2, name2, resi3, name3, resi4, name4, theta, k))

            add_dihedrals(mol, subsel, k, theta, verbosity, tempered,
                          tempering_group)

        elif (len(e) == 10):
            resi1 = e[0]
            resi2 = e[2]
            resi3 = e[4]
            resi4 = e[6]

            name1 = e[1]
            name2 = e[3]
            name3 = e[5]
            name4 = e[7]

            theta = e[8]
            k     = e[9]
            
            subsel1 = '(protein and resid %d and name %s)' %(resi1, name1) 
            subsel2 = '(protein and resid %d and name %s)' %(resi2, name2) 
            subsel3 = '(protein and resid %d and name %s)' %(resi3, name3) 
            subsel4 = '(protein and resid %d and name %s)' %(resi4, name4) 

            subsel = '%s or %s or %s or %s' %(subsel1, subsel2,
                                              subsel3, subsel4)

            if verbosity>0:
                print('restraining dihedral for ([%d %s], [%d %s], [%d %s], [%d %s]) with theta=%f and k=%f' %(resi1, name1, resi2, name2, resi3, name3, resi4, name4, theta, k))

            add_dihedrals(mol, subsel, k, theta, verbosity,tempered,
                          tempering_group)


#----------------------------------------------------------------------#
def main():
    args = parse_args()

    # Check arguments for obvious use errors
    if not os.path.exists(args.dms_in):
        print('could not find dms input file', args.dms_in)
        sys.exit(-1)
    if os.path.exists(args.dms_out) and args.noclobber:
        print('dms output file exists and noclobber option set, aborting')
        sys.exit(-1)

    # Pre-processing
    entries=[]
    if (args.backbone is not None):
        for p in args.backbone:
            # (resid p[0] to resid p[1], K = p[2])
            for i in range(int(p[0]), int(p[1])+1):
                entries.append((i, float(p[2])))

    if (args.phipsi is not None):
        for p in args.phipsi:
            # (resid p[0], phi = p[1], psi = p[2], K = p[3])
            entries.append((int(p[0]), 
                            float(p[1]), 
                            float(p[2]), 
                            float(p[3])))

    if (args.lockarbitrarydihedral is not None):
        for p in args.lockarbitrarydihedral:
            entries.append((p[0], p[1], p[2], p[3], float(p[4])))
    if (args.lockdihedral is not None):
        for p in args.lockdihedral:
            entries.append((int(p[0]), p[1],
                            int(p[2]), p[3],
                            int(p[4]), p[5],
                            int(p[6]), p[7], 
                            float(p[8])))

    if (args.setdihedral is not None):
        for p in args.setdihedral:
            entries.append((int(p[0]), p[1],
                            int(p[2]), p[3],
                            int(p[4]), p[5],
                            int(p[6]), p[7], 
                            float(p[8]), float(p[9])))

    if (entries == []):
        print('no param options given, nothing to do')
        sys.exit(-1)
        
    # Open system
    if args.verbosity>=2:
        print('loading', args.dms_in)
    mol=msys.LoadDMS(args.dms_in)

    # Add dihedral restraints
    restrain_dihedrals(mol, entries, args.verbosity, args.sele_prefix, args.tempered, 
         args.tempering_group)
    
    # Write system with restraints
    if args.verbosity>=2:
        print('saving', args.dms_out)
    msys.SaveDMS(mol, args.dms_out)

if __name__=='__main__':
    main()

# vim: filetype=python
