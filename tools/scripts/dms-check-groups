#!/usr/bin/env desres-exec
# -*- python -*-
#{
# desres-cleanenv \
# -m numpy/1.6.2-31A/lib-python \
# -m periodicfix/2.4.7/lib-python \
# -- python $0 "$@" 
#}

'''
dms-check-groups system.dms [ options ]

Check that terms in the forcefield are injectable by Desmond.

Currently only bond and exclusion terms are checked, but if there are
any problems with the initial model it should be evident from from just
those terms.

'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))

import msys
from msys.wrap import Wrapper
import numpy

def check_midpoint(table, radius):
    print "Checking midpoints for table %s with %d atoms, %d terms" % (
        table.name, table.natoms, table.nterms)
    pos = table.system.getPositions()
    center = numpy.zeros(3, 'd')
    scale = 1.0/table.natoms
    r2 = radius * radius
    bad = set()
    for t in table._ptr.terms():
        center[:] = 0
        atoms = table._ptr.atoms(t)
        for a in atoms:
            center += pos[a]
        center *= scale
        for a in atoms:
            delta = pos[a] - center
            rad2 = numpy.dot(delta, delta)
            if rad2 > r2:
                bad.update(atoms)
                print "  Term %d too large with atoms %s" % (
                t, ' '.join(map(str, atoms)))
                break
    if bad:
        print "Affected atoms:", ' '.join(map(str, sorted(bad)))
    return not bad

def check_replicate(table, radius):
    return True

def check(table, radius):
    if table.category in ('bond', 'exclusion'):
        return check_midpoint(table, radius)
    elif table.category in ('constraint', 'virtual', 'polar'):
        return check_replicate(table, radius)
    return False

def main():
    import optparse
    parser = optparse.OptionParser(__doc__)
    parser.add_option('-r', '--radius', default=5.5, type='float',
            help='clone buffer radius, default 5.5')
    opts, args = parser.parse_args()
    if len(args)!=1:
        parser.error("incorrect number of arguments")

    print "Reading input file", args[0]
    mol=msys.Load(args[0])

    print "Fixing bonds"
    Wrapper(mol).wrap()

    ok = True
    for table in mol.tables:
        if table.natoms < 2: continue
        ok = check(table, opts.radius) and ok
    if ok:
        print "All tables look ok"
    else:
        print "Some tables have suspicious terms"
    return not ok

if __name__=="__main__": exit(main())

# vim: filetype=python
