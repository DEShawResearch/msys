#!/usr/bin/env desres-exec
# -*- python -*-
#{
# source `dirname $0`/../share/MODULES && \
# exec desres-cleanenv -m $PYTHON/bin \
# -- python $0 "$@" 
#}

'''
dms-check-groups system.dms [ options ]

Check that terms in the forcefield are injectable by Desmond.

Currently only bond and exclusion terms are checked, but if there are
any problems with the initial model it should be evident from from just
those terms.

'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))

import msys
from msys import groups
from msys.wrap import Wrapper

def main():
    import optparse
    parser = optparse.OptionParser(__doc__)
    parser.add_option('-r', '--radius', default=5.5, type='float',
            help='clone buffer radius, default 5.5')
    opts, args = parser.parse_args()
    if len(args)!=1:
        parser.error("incorrect number of arguments")

    print "Reading input file", args[0]
    mol=msys.Load(args[0])

    print "Fixing bonds"
    Wrapper(mol).wrap()

    ok = True
    for table in mol.tables:
        print "Checking midpoints for table %s with %d atoms, %d terms" % (
            table.name, table.natoms, table.nterms)
        bad = groups.clone_buffer_violations(table, opts.radius)
        if bad:
            print "Violations for atoms:", ' '.join(map(str, sorted(bad)))
            print "%d atoms, %d %s terms affected." % (
                    len(bad),
                    len(table.findWithAny([mol.atom(i) for i in bad])), 
                    table.name)
            ok = False

    if ok:
        print "All tables look ok"
    else:
        print "Some tables have suspicious terms"
    return not ok

if __name__=="__main__": exit(main())

# vim: filetype=python
