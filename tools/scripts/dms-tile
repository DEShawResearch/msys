#!/usr/bin/env desres-exec
#{
# source `dirname $0`/../share/MODULES && \
# exec desres-cleanenv -m $NUMPY/lib-python \
# -- python $0 "$@" 
#}

'''
Tile a system system by nx, ny, nz
'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))
import msys
import numpy
import itertools

def main():
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('ifile', nargs='+', help='input file(s)')
    parser.add_argument('-o', '--output', required=True, help='output file')
    parser.add_argument('--nx', default=1, type=int, 
            help='tiles in the x direction')
    parser.add_argument('--ny', default=1, type=int, 
            help='tiles in the y direction')
    parser.add_argument('--nz', default=1, type=int, 
            help='tiles in the z direction')
    parser.add_argument('--allow-unequal-cells', action='store_true', 
            default=False, help='allow input files to have different cell shapes')
    args=parser.parse_args()
    ifile, ofile = args.ifile, args.output
    nx, ny, nz = args.nx, args.ny, args.nz
    if nx<1 or ny<1 or nz<1:
        print "Tile dimensions must be positive"
        return 1
    n = nx*ny*nz
    if n%len(ifile)!=0:
        print "Number of input files (%d) is incommensurate with number of replicas (%d)" % (len(ifile), n)
        return 1

    print "Loading", ', '.join(ifile)
    mols = map(msys.Load, ifile)
    cell = mols[0].getCell()
    for i in range(1,len(mols)):
        icell = mols[i].getCell().tolist()
        if cell.tolist() != icell:
            print "The global cell of the %d'th molecule differs from the first" % (i+1)
            print cell.tolist(), "!=", icell
            if not args.allow_unequal_cells: return 1

    cycle = itertools.cycle(mols)

    print "Tiling %d x %d x %d: %d total copies" % (
            nx,ny,nz,n)
    xshift = -0.5 * (nx-1)*cell[0]
    yshift = -0.5 * (ny-1)*cell[1]
    zshift = -0.5 * (nz-1)*cell[2]

    out = msys.CreateSystem()

    for i in range(nx):
        xdelta = xshift + i*cell[0]
        for j in range(ny):
            ydelta = yshift + j*cell[1]
            for k in range(nz):
                zdelta = zshift + k*cell[2]
                delta = xdelta + ydelta + zdelta
                mol = cycle.next()
                mol.translate(delta)
                out._ptr.append(mol._ptr, msys._msys.BadId)
                mol.translate(-delta)

    # set up the unit cell
    out.setCell(numpy.dot(numpy.diag((nx,ny,nz)), cell))

    # copy nonbonded info
    out.nonbonded_info = mol.nonbonded_info

    print "Eliminating redundant forcefield terms"
    out.coalesceTables()
    out = out.clone()

    print "Saving '%s'" % ofile
    msys.Save(out, ofile)

    print "Done"

if __name__=="__main__": exit(main())

# vim: filetype=python
