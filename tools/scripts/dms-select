#!/usr/bin/env desres-exec
# -*- python -*-
#{
# desres-cleanenv -m numpy/1.6.2-31A/lib-python -- python $0 "$@"
#}

'''
dms-select input_file [ options ]

Write or append a selection from input_file to an output file.
'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))
import msys

def main():
    import optparse
    parser = optparse.OptionParser(__doc__)

    parser.add_option('-s', '--selection', default=None,
            help="Atom selection text")
    parser.add_option('-a', '--append', default=None,
            help="Append to given file.")
    parser.add_option('-o', '--output', default=None,
            help="Write new system to given file")
    parser.add_option('-v', '--verbose', action='store_true', default=True,
            help="Be chatty")
    parser.add_option('-q', '--quiet', action='store_false', dest='verbose',
            help="Don't be chatty")
    parser.add_option('-c', '--coalesce', action='store_true', default=False,
            help='Coalesce input file parameters before saving')
    parser.add_option('--structure-only', action='store_true', default=False,
            help='Write no forcefield information')

    opts, args = parser.parse_args()
    if len(args)!=1:
        parser.error("incorrect number of arguments")

    if opts.output and opts.append:
        raise ValueError, "Cannot specify both --append and --output"
    elif opts.output:
        ofile = opts.output
    elif opts.append:
        ofile = opts.append
    else:
        ofile = None

    if opts.verbose:
        print "Loading", args[0]
    mol=msys.Load(args[0])

    if opts.selection:
        mol=mol.clone(opts.selection)

    if opts.verbose:
        print "dms-select: %d chain(s), %d residue(s), %d atom(s)" % (
                len(mol.chains), len(mol.residues), len(mol.atoms))

    if ofile:
        if opts.coalesce:
            if opts.verbose: print "Coalescing tables"
            mol.coalesceTables()
            mol = mol.clone()

        if opts.verbose: print "Saving", ofile
        msys.Save(mol, ofile, 
                append=opts.append, 
                structure_only=opts.structure_only)

if __name__=="__main__": main()

# vim: filetype=python
