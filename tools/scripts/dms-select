#!/usr/bin/env desres-exec
# -*- python -*-
#{
# source `dirname $0`/../share/MODULES && \
# exec garden with -c -m $PYTHON/bin \
# -- python $0 "$@" 
#}

'''
Write or append a selection from input_file to an output file.
'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))
import msys

def main():
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('files', nargs='+', help='input files')
    parser.add_argument('-s', '--selection',
            help="Atom selection text")
    parser.add_argument('-o', '--output', required=True,
            help="Write new system to given file")
    parser.add_argument('-v', '--verbose', action='store_true', default=True,
            help="Be chatty")
    parser.add_argument('-q', '--quiet', action='store_false', dest='verbose',
            help="Don't be chatty")
    parser.add_argument('-c', '--coalesce', action='store_true', default=False,
            help='Coalesce input file parameters before saving')
    parser.add_argument('--structure-only', action='store_true', default=False,
            help='Write no forcefield information')
    parser.add_argument('-A', '--assign', action='store_true', default=False,
            help='Assign bond order and formal charge')

    opts = parser.parse_args()

    path = opts.files[0]
    if opts.verbose:
        print >> sys.stderr, "Loading", path
    mol = msys.Load(path)
    for path in opts.files[1:]:
        if opts.verbose:
            print >> sys.stderr, "Loading", path
        mol.append(msys.Load(path))

    if opts.assign:
        if opts.verbose:
            print >> sys.stderr, "Assigning bond order and formal charge"
        msys.AssignBondOrderAndFormalCharge(mol)

    if opts.selection:
        mol=mol.clone(opts.selection)

    if opts.verbose:
        print >> sys.stderr, "dms-select: %d chain(s), %d residue(s), %d atom(s)" % (
                len(mol.chains), len(mol.residues), len(mol.atoms))

    if opts.coalesce:
        if opts.verbose: print >> sys.stderr, "Coalescing tables"
        mol.coalesceTables()
        mol = mol.clone()

    if opts.output:
        if opts.verbose: print >> sys.stderr, "Saving", opts.output
        import time
        t=-time.time()
        msys.Save(mol, opts.output, structure_only=opts.structure_only)
        t+=time.time()
        if opts.verbose:
            print >> sys.stderr, "Save: %8.3fms" % (t*1000)

if __name__=="__main__": main()

# vim: filetype=python
