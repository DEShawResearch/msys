#!/usr/bin/garden-exec
#{
# garden env-keep-only
# . `dirname $0`/../share/env.sh
# exec python $0 "$@"
#}

"""
Replicate the input system to achieve a specified density and size.
"""

import sys, os
import msys, numpy


def main():
    args = parse_args()

    x = args.x if args.x is not None else args.l
    y = args.y if args.y is not None else args.l
    z = args.z if args.z is not None else args.l
    if None in (x, y, z):
        print("ERROR: Box dimensions incompletely specified", file=sys.stderr)
        exit(1)

    if args.seed is not None:
        print("Random number seed:", args.seed)
        numpy.random.seed(args.seed)

    print("Loading '%s'" % args.ifile)
    mol = msys.Load(args.ifile)

    print("Assigning mass based on atomic number")
    for a in mol.atoms:
        a.mass = msys.MassForElement(a.atomic_number)

    if args.align:
        print("Aligning principal axis of input structure")
        align_principal_axes(mol)
    else:
        print("NOT aligning principal axis of input structure")

    if args.randomize:
        print("Randomizing molecule orientation")

    # convert g/cm^3 to molecular density
    fac_to_gcm3 = 10.0 / 6.022
    molmass = sum(a.mass for a in mol.atoms)
    moldensity = args.density / (molmass * fac_to_gcm3)

    out = replicate(mol, x, y, z, moldensity, randomize=args.randomize)

    print("Eliminating redundant forcefield terms")
    out.coalesceTables()
    out = out.clone()

    if args.temperature is not None:
        print("Thermalizing velocities to %sK" % args.temperature)
        from msys import thermalize

        thermalize.apply(out, args.temperature, args.seed)

    if args.unbuffered:
        if not args.ofile.endswith(".dms"):
            print(
                "WARNING: unbuffered saves require DMS format, but output file name ends with '%s'" % (args.ofile[-4:])
            )
        print("Saving unbuffered DMS file '%s'" % args.ofile)
        msys.SaveDMS(out, args.ofile, unbuffered=True)
    else:
        print("Saving '%s'" % args.ofile)
        msys.Save(out, args.ofile)

    print("Done")


def parse_args():
    import argparse

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("ifile", help="input file")
    parser.add_argument("ofile", help="output file")
    parser.add_argument("-x", type=float, help="length of box in x dimension")
    parser.add_argument("-y", type=float, help="length of box in y dimension")
    parser.add_argument("-z", type=float, help="length of box in z dimension")
    parser.add_argument("-l", type=float, help="length of cubix box, overridden by -x, -y, and -z")
    parser.add_argument("-d", "--density", type=float, required=True, help="density in g/cm^3")
    parser.add_argument(
        "-r",
        "--randomize",
        action="store_true",
        default=False,
        help="randomize the orientation of replicated molecules",
    )
    parser.add_argument("-a", "--align", action="store_true", default=True, help="Align principal axis with (1,1,1)")
    parser.add_argument(
        "-A", "--no-align", action="store_false", dest="align", help="Don't align principal axis with (1,1,1)"
    )
    parser.add_argument("-t", "--temperature", type=float, help="Assign randomized velocities at specified temperature")
    parser.add_argument("-s", "--seed", type=int, help="Random seed")
    parser.add_argument(
        "--unbuffered", action="store_true", default=False, help="Write output dms file with no in-memory buffering"
    )
    return parser.parse_args()


def replicate(mol, x, y, z, density, randomize=False):
    """ density specified in number of replicas per A^3 """

    vol = x * y * z
    n = density * vol
    target_density = density

    nx = int(n ** (1.0 / 3))
    ny = nx
    nz = nx
    density = nx * ny * nz / vol

    # This undershoots the density.  Try to get closer.
    for i in range(10):
        tx = nx
        ty = ny
        tz = nz
        c = i % 3
        if c == 0:
            tx += 1
        elif c == 1:
            ty += 1
        else:
            tz += 1
        trialdensity = tx * ty * tz / vol
        err = abs(density - target_density)
        if abs(trialdensity - target_density) < err:
            nx = tx
            ny = ty
            nz = tz
            density = trialdensity
    n = nx * ny * nz

    print("Requested molecular density: %8.5f" % target_density)
    print("Actual molecular density:    %8.5f" % (n / vol))

    cell = numpy.diag((x / nx, y / ny, z / nz))

    print("Tiling %d x %d x %d: %d total copies, %d atoms" % (nx, ny, nz, n, n * mol.natoms))
    xshift = -0.5 * (nx - 1) * cell[0]
    yshift = -0.5 * (ny - 1) * cell[1]
    zshift = -0.5 * (nz - 1) * cell[2]

    out = msys.CreateSystem()
    out.setCell(numpy.diag((x, y, z)))
    pos = mol.getPositions()
    pos -= pos.mean(0)

    r = 0
    for i in range(nx):
        xdelta = xshift + i * cell[0]
        for j in range(ny):
            ydelta = yshift + j * cell[1]
            for k in range(nz):
                zdelta = zshift + k * cell[2]
                delta = xdelta + ydelta + zdelta
                r += 1

                # if input system contains only one residue, then assign
                # a new resid to each replica.  If one chain, assingn
                # a new chain for each replica.  Otherwise, construct
                # separate cts for eah replica.
                ctid = 0
                if mol.nresidues == 1:
                    mol.residue(0).resid = r
                    if out.ncts == 0:
                        out.addCt()
                elif mol.nchains == 1:
                    mol.chain(0).name = "R%d" % r
                    if out.ncts == 0:
                        out.addCt()
                else:
                    # ctid = out.addCt().id
                    ctid = msys.BadId

                if randomize:
                    newpos = numpy.dot(pos, randomrot())
                    newpos += delta
                    mol.setPositions(newpos)
                    out._ptr.append(mol._ptr, ctid)
                else:
                    mol.translate(delta)
                    out._ptr.append(mol._ptr, ctid)
                    mol.translate(-delta)

    return out


def align_principal_axes(mol):
    pos = mol.getPositions()
    pos -= pos.mean(0)
    m = [msys.MassForElement(a.atomic_number) for a in mol.atoms]
    x = pos[:, 0]
    y = pos[:, 1]
    z = pos[:, 2]
    Ixx = sum(m * (y * y + z * z))
    Ixy = -sum(m * (x * y))
    Ixz = -sum(m * (x * z))
    Iyy = sum(m * (x * x + z * z))
    Iyz = -sum(m * (y * z))
    Izz = sum(m * (x * x + y * y))

    I = numpy.array([[Ixx, Ixy, Ixz], [Ixy, Iyy, Iyz], [Ixz, Iyz, Izz]])

    eigs, eigv = numpy.linalg.eig(I)
    ind = eigs.argsort()
    eigs = eigs[ind]
    eigv = eigv[:, ind]
    rot = eigv.transpose()
    if numpy.linalg.det(rot) < 0:
        rot[2, :] *= -1
    pos = numpy.dot(pos, rot.transpose())

    # align x axis with 1,1,1
    mat2 = numpy.array(
        (
            0.5773502588272095,
            -0.7071067690849304,
            -0.40824827551841736,
            0.5773502588272095,
            0.7071067690849304,
            -0.40824827551841736,
            0.5773502588272095,
            0.0,
            0.8164966106414795,
        )
    ).reshape((3, 3))
    pos = numpy.dot(pos, mat2.transpose())

    mol.setPositions(pos)


def randomrot():
    """ Return a random rotation matrix """
    import numpy as np

    r1, r2, r3 = np.random.rand(3)

    # sample a point on the unit sphere to get axis
    z = 2 * r1 - 1
    r = np.sqrt(1 - z ** 2)
    phi = r2 * 2 * np.pi
    x = r * np.cos(phi)
    y = r * np.sin(phi)

    # sample random rotation
    theta = r3 * 2 * np.pi

    # Euler-Rodriguez formula
    a = np.cos(0.5 * theta)
    sintheta = np.sin(0.5 * theta)
    b = -x * sintheta
    c = -y * sintheta
    d = -z * sintheta
    return np.array(
        [
            [a * a + b * b - c * c - d * d, 2 * (b * c - a * d), 2 * (b * d + a * c)],
            [2 * (b * c + a * d), a * a + c * c - b * b - d * d, 2 * (c * d - a * b)],
            [2 * (b * d - a * c), 2 * (c * d + a * b), a * a + d * d - b * b - c * c],
        ]
    )


if __name__ == "__main__":
    main()

# vim: filetype=python
