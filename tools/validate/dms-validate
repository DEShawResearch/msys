#!/usr/bin/garden-exec
#{
# garden env-keep-only
# . `dirname $0`/../share/env.sh
# exec python $0 "$@"
#}

'''dms-validate system.dms [ options ]

`dms-validate` flags conditions that are likely to be errors in a chemical
system.  The set of "basic" checks are always performed; additional checks
can be enabled using various command line flags. 

The set of basic checks comprise the following:

 * nonbonded: if a nonbonded table exists, every particle must have a 
   nonbonded param assignment.

 * knot: there must not be bonds passing through rings of size 10 or fewer.

 * nonzerobox: the volume of the global cell must be positive.
 
 * masslessatoms: there should be no massless atoms with atomic number > 0.

The set of strict checks comprise the following items.  Note that it
is certainly possible for a valid simulation to be performed using a
system that passes none of its strict checks!  However, it may be worth
investigating why a system fails theses checks.

 * constraints: the system must have constraint terms.  

 * consistent masses: Particles with equal atomic number must have equal mass.
   Pseudo particles (those with atomic number zero) are excluded from the
   check.

 * sparsify: every 1-4 bond (i.e., pair of atoms separated by three 
   distinct bonds) must be included in the exclusion table.

 * split waters: each water molecule must have its own unique resid,
   and live in its own residue.

Desmond-specific checks:

 * bonded terms: check that neither the exclusion table nor any table
   in the bond_term metable contains terms whose atoms are not connected
   through the bond table.  

 * groups: check that all atoms in a bonded term are within a typical
   clone buffer radius of each other.  The value for the clone buffer
   used in dms-validate is 5.5, but an alternative radius may be provided
   using the dms-check-groups tool.

'''

import sys, os

import msys
from msys import validate

def parse_args():
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('ifile',
            help="Input file or jobid")
    parser.add_argument('--strict', action='store_true',
            help="Run strict tests")
    parser.add_argument('--desmond', action='store_true',
            help="Run Desmond-specific tests")
    parser.add_argument('--verbose', action='store_true',
            help="Be chatty")
    parser.add_argument('--all', action='store_true',
            help="Run all tests")
    parser.add_argument('--anton', action='store_true',
            help="Run Anton-specific tests")
    return parser.parse_args()

def main():
    args = parse_args()
    mol = msys.Load(args.ifile)
    opts = args.__dict__
    opts.pop('ifile')
    result=validate.Validate(mol, **opts)
    return not result.wasSuccessful()

if __name__=="__main__":
    exit(main())

# vim: filetype=python
