#!/usr/bin/env desres-exec
# -*- python -*-
#{
# source `dirname $0`/../share/MODULES && \
# exec desres-cleanenv -m $NUMPY/lib-python \
# -- python $0 "$@"
#}

'''
dms-find-knot system.dms [ options ]

*dms-find-knot* searches for bonds which pass through a ring of atoms; e.g.,
a lipid tail passing through an aromatic ring in a protein.  Such geometries
can accidentally arise during system construction and usually indicate
a badly constructed system which will behave badly during simulation.

If --untie is specified, the script will attempt to remove the knots by translating the offending bonds
outside of the ring (iteratively to convergence).
'''

import sys, os
sys.path.insert(0,os.path.join(os.path.dirname(__file__),'..','lib','python'))

import msys
from msys import knot
from optparse import OptionParser
import cProfile as profile

if __name__ == "__main__":
    knot.ut_intersection()
    
    parser = OptionParser("Usage: dms_find_knot [options] system.dms.\n\nGiven a dms file, find any instances where a bond is 'threaded' through a ring.")

    parser.add_option("--max-cycle", help="Maximum cycle size to check (if this is set too large, disulfide-bond-induced rings will be checked).")

    parser.add_option("-s", "--selection", help="Limit knot search to selection")
    parser.add_option("--untie", action="store_true", help="Attempt to remove any knots found and write to --outfile", 
                      default=False)
    parser.add_option("--outfile",'-o', type=str, help="Output dms file; for use in combination with --untie", 
                      default=None)
    parser.add_option("--move-lipid", action="store_true", 
                      help="Use with --untie; move the whole lipid molecule instead of just the two offending bond atoms",
                      default=False)
    parser.add_option("--ignore-excluded-knots", action="store_true", default=False,
                      help="Ignore knots where the bond atoms are not interacting with the ring atoms," +
                      " as determined by the exclusion table")

    (o,a) = parser.parse_args(sys.argv)
    if len(a)!=2:
        parser.error("Incorrect number of arguments")

    if (o.untie and not o.outfile) or (o.outfile and not o.untie):
        parser.error("--outfile must be used in combination with --untie")
 
    if not o.untie:
        # need exclusion table if o.ignore_excluded_knots
        mol=msys.Load(a[1], structure_only=not o.ignore_excluded_knots) 
        klist = knot.FindKnots(
            mol,
            max_cycle_size=o.max_cycle,
            selection=o.selection,
            ignore_excluded_knots=o.ignore_excluded_knots,
            verbose=True)

        sys.exit(len(klist)!=0)
    else:
        mol=msys.Load(a[1])
        converged = knot.UntieKnots(
            mol,
            max_cycle_size=o.max_cycle,
            ignore_excluded_knots=o.ignore_excluded_knots,
            selection=o.selection,
            move_lipid=o.move_lipid,
            verbose=True)
        msys.Save(mol, o.outfile)

        sys.exit(not converged)

# vim: filetype=python
